#!/usr/bin/env python3
"""
OCR automatikus f√©nyk√©pfelismer√©s GPT-4o mini Visionnel.
Automatikusan megtal√°lja √©s feldolgozza a k√∂nyvt√°rban tal√°lhat√≥ k√©peket.

$ python pictureread.py
"""
import base64
import sys
from pathlib import Path
from dotenv import load_dotenv
import os
from openai import OpenAI
from PIL import Image
import glob

# ‚îÄ‚îÄ‚îÄ Be√°ll√≠t√°sok ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

MODEL_NAME = "gpt-4o-mini"          # Vision-k√©pes modell
DETAIL_LEVEL = "high"               # "low" olcs√≥bb, de pontatlanabb lehet
MAX_TOKENS = 1000                   # OCR-v√°lasz hossz (ig√©ny szerint)

# T√°mogatott k√©pform√°tumok
SUPPORTED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp', '.heic'}

# ‚îÄ‚îÄ‚îÄ Seg√©df√ºggv√©nyek ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def find_images_in_directory(directory: Path = None) -> list[Path]:
    """
    Megkeresi az √∂sszes k√©pf√°jlt a megadott k√∂nyvt√°rban.
    Ha nincs megadva k√∂nyvt√°r, az aktu√°lis k√∂nyvt√°rat haszn√°lja.
    """
    if directory is None:
        directory = Path.cwd()
    
    image_files = []
    for ext in SUPPORTED_EXTENSIONS:
        pattern = f"*{ext}"
        image_files.extend(directory.glob(pattern))
        # Nagy bet≈±s kiterjeszt√©sek is
        pattern = f"*{ext.upper()}"
        image_files.extend(directory.glob(pattern))
    
    return sorted(image_files)

def image_to_base64(image_path: Path) -> str:
    """
    Bet√∂lt egy k√©pet, biztos√≠tja a JPEG/PNG form√°tumot, √©s base64-re k√≥dolja.
    """
    # Ha nem JPEG/PNG, konvert√°ljuk (pl. HEIC ‚Üí JPEG) a PIL seg√≠ts√©g√©vel
    if image_path.suffix.lower() not in {".jpg", ".jpeg", ".png"}:
        img = Image.open(image_path)
        temp_path = image_path.with_suffix(".jpg")
        img.save(temp_path, format="JPEG", quality=95)
        image_path = temp_path

    with open(image_path, "rb") as f:
        return base64.b64encode(f.read()).decode("utf-8")

def process_image(client: OpenAI, img_path: Path) -> None:
    """
    Feldolgoz egy k√©pet √©s ki√≠rja az OCR eredm√©nyt.
    """
    print(f"‚Üí Feldolgoz√°s: {img_path.name}")
    
    try:
        b64_image = image_to_base64(img_path)
        
        print("  K√©p elk√ºld√©se a GPT-4o-nak‚Ä¶")
        response = client.chat.completions.create(
            model=MODEL_NAME,
            max_tokens=MAX_TOKENS,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "K√©rlek, olvasd el √©s √≠rd le a k√©pen l√°that√≥ minden sz√∂veget pontosan √∫gy, ahogy l√°tod. Ha nincs sz√∂veg a k√©pen, akkor √≠rd le, hogy mit l√°tsz."},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{b64_image}",
                                "detail": DETAIL_LEVEL
                            },
                        },
                    ],
                }
            ],
        )

        # Token haszn√°lat megjelen√≠t√©se
        usage = response.usage
        print(f"  üí° Token haszn√°lat: {usage.prompt_tokens} prompt + {usage.completion_tokens} completion = {usage.total_tokens} √∂sszesen")

        print(f"\n‚îÄ‚îÄ Felismert sz√∂veg ({img_path.name}) ‚îÄ‚îÄ")
        print(response.choices[0].message.content.strip())
        print("\n" + "="*50 + "\n")
        
    except Exception as e:
        print(f"  Hiba a k√©p feldolgoz√°sa sor√°n: {e}")

# ‚îÄ‚îÄ‚îÄ F≈ëprogram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main() -> None:
    # .env bet√∂lt√©se ‚Üí OPENAI_API_KEY k√∂rnyezeti v√°ltoz√≥
    load_dotenv()
    if os.getenv("OPENAI_API_KEY") is None:
        sys.exit("Hi√°nyzik az OPENAI_API_KEY a k√∂rnyezeti v√°ltoz√≥k k√∂z√ºl!")

    client = OpenAI()  # kulcsot implicit m√≥don veszi a k√∂rnyezeti v√°ltoz√≥b√≥l

    # K√©pek keres√©se az aktu√°lis k√∂nyvt√°rban
    current_dir = Path.cwd()
    image_files = find_images_in_directory(current_dir)
    
    if not image_files:
        print("Nem tal√°ltam k√©pf√°jlokat az aktu√°lis k√∂nyvt√°rban.")
        print(f"T√°mogatott form√°tumok: {', '.join(SUPPORTED_EXTENSIONS)}")
        return
    
    print(f"Tal√°ltam {len(image_files)} k√©pf√°jlt:")
    for img in image_files:
        print(f"  - {img.name}")
    print()
    
    # Minden k√©p feldolgoz√°sa
    for img_path in image_files:
        process_image(client, img_path)


if __name__ == "__main__":
    main()
