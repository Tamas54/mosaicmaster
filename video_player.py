import os
import json
import logging
import asyncio
import time
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
from pydantic import BaseModel
import subprocess
import shutil

# MediaStreamInfo oszt√°ly a stream inform√°ci√≥k kezel√©s√©hez
class MediaStreamInfo(BaseModel):
    video_streams: List[Dict[str, Any]] = []
    audio_streams: List[Dict[str, Any]] = []
    subtitle_streams: List[Dict[str, Any]] = []
    chapters: List[Dict[str, Any]] = []
    format_info: Dict[str, Any] = {}

class VideoPlayerService:
    """Vide√≥lej√°tsz√°ssal √©s -feldolgoz√°ssal kapcsolatos szolg√°ltat√°sok - LEOPARD FINAL EDITION"""
    
    def __init__(self, upload_dir: Path, converted_dir: Path, hls_dir: Path, 
                 gpu_accelerator, videos_db: Dict[str, Any], logger):
        self.UPLOAD_DIR = upload_dir
        self.CONVERTED_DIR = converted_dir
        self.HLS_DIR = hls_dir
        self.gpu_accelerator = gpu_accelerator
        self.videos_db = videos_db
        self.logger = logger
        
        # Inicializ√°ljuk a LEOPARD be√°ll√≠t√°sokat
        self._init_leopard_mode()
        
        self.logger.info(f"VideoPlayerService inicializ√°lva LEOPARD FINAL EDITION m√≥dban")
    
    def _init_leopard_mode(self):
        """LEOPARD II A7+ m√≥d inicializ√°l√°sa - GPU optimaliz√°ci√≥k"""
        self.logger.info("üî•üî•üî• LEOPARD II FINAL EDITION AKTIV√ÅLVA! üî•üî•üî•")
        
        # CPU inform√°ci√≥k
        self.cpu_cores = os.cpu_count() or 4
        
        # GPU detekt√°l√°sa √©s optim√°lis be√°ll√≠t√°sok
        gpu_type = self.gpu_accelerator.gpu_type["type"]
        gpu_name = self.gpu_accelerator.gpu_type["name"]
        
        # NVIDIA GPU specifikus optimaliz√°ci√≥
        if gpu_type == "nvidia":
            self.logger.info(f"üí• NVIDIA {gpu_name} LEOPARD TURBO √úZEMM√ìDBA KAPCSOLVA!")
            
            # NVIDIA-specifikus encoder be√°ll√≠t√°sok - JAV√çTOTT PARAM√âTEREK
            self.leopard_settings = {
                "encoder": "-c:v h264_nvenc -preset p1 -tune ll -rc constqp -qp 28 -bf 0 -b_adapt 0 -spatial_aq 0 -temporal_aq 0 -sc_threshold 0 -zerolatency 1 -surfaces 32 -threads 8",
                "hwaccel": "-hwaccel cuda -hwaccel_output_format cuda"
            }
            
        # Intel QSV optimaliz√°ci√≥
        elif gpu_type == "intel":
            self.logger.info(f"üí• INTEL {gpu_name} LEOPARD √úZEMM√ìDBA KAPCSOLVA!")
            
            # Intel-specifikus be√°ll√≠t√°sok
            self.leopard_settings = {
                "encoder": "-c:v h264_qsv -preset veryfast -look_ahead 0 -global_quality 28 -async_depth 6",
                "hwaccel": "-hwaccel qsv -hwaccel_output_format qsv"
            }
        
        # AMD GPU optimaliz√°ci√≥
        elif gpu_type == "amd":
            self.logger.info(f"üí• AMD {gpu_name} LEOPARD √úZEMM√ìDBA KAPCSOLVA!")
            
            # AMD-specifikus be√°ll√≠t√°sok
            self.leopard_settings = {
                "encoder": "-c:v h264_amf -quality speed -usage transcoding -rc constqp -qp 28 -header_insertion_mode none",
                "hwaccel": "-hwaccel amf -hwaccel_output_format amf"
            }
        
        # CPU fallback, de m√©g √≠gy is optimaliz√°lva a sebess√©gre
        else:
            self.logger.info("‚ö° CPU-ALAP√ö LEOPARD √úZEMM√ìD AKTIV√ÅLVA!")
            
            # CPU-specifikus be√°ll√≠t√°sok - maxim√°lisan kihaszn√°ljuk a processzormagokat
            self.leopard_settings = {
                "encoder": f"-c:v libx264 -preset ultrafast -tune fastdecode,zerolatency -crf 28 -threads {self.cpu_cores} -flags +low_delay -sc_threshold 0 -profile:v baseline",
                "hwaccel": ""
            }
    
    def get_video_duration(self, file_path):
        """Get video duration using ffprobe."""
        try:
            cmd = [
                "ffprobe",
                "-v", "error",
                "-show_entries", "format=duration",
                "-of", "default=noprint_wrappers=1:nokey=1",
                str(file_path)
            ]
            output = subprocess.check_output(cmd).decode("utf-8").strip()
            return float(output)
        except Exception as e:
            self.logger.error(f"Error getting duration: {e}")
            return None

    def generate_thumbnail(self, video_path, output_path, time_offset="00:00:05"):
        """Generate thumbnail for video using ffmpeg."""
        try:
            cmd = [
                "ffmpeg",
                "-hide_banner",
                "-loglevel", "error",
                "-i", str(video_path),
                "-ss", time_offset,
                "-vframes", "1",
                "-vf", "scale='min(640,iw):-1'",  # M√©retez√©s, de max 640px sz√©les
                "-y",
                str(output_path)
            ]
            subprocess.run(cmd, check=True)
            return True
        except Exception as e:
            self.logger.error(f"Error generating thumbnail: {e}")
            return False

    def is_web_compatible(self, file_extension):
        """Check if the file format is already web compatible."""
        return file_extension.lower() in ['mp4', 'webm']
    
    async def get_media_streams(self, file_path: str) -> MediaStreamInfo:
        """Detekt√°lja a vide√≥, audio √©s felirat stream-eket egy m√©diaf√°jlban"""
        try:
            # FFprobe parancs a m√©diafolyamok lek√©rdez√©s√©hez JSON form√°tumban
            cmd = [
                "ffprobe",
                "-v", "quiet",
                "-print_format", "json",
                "-show_format",
                "-show_streams",
                "-show_chapters",
                str(file_path)
            ]
            
            process = await asyncio.create_subprocess_exec(
                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode != 0:
                self.logger.error(f"FFprobe error: {stderr.decode() if stderr else 'Unknown error'}")
                return MediaStreamInfo()
            
            # JSON eredm√©ny feldolgoz√°sa
            media_info = json.loads(stdout.decode())
            
            result = MediaStreamInfo(
                format_info=media_info.get("format", {})
            )
            
            # Streamek sz√©tv√°logat√°sa t√≠pus szerint
            for stream in media_info.get("streams", []):
                codec_type = stream.get("codec_type", "")
                
                # Alapvet≈ë metadatok hozz√°ad√°sa
                stream_info = {
                    "index": stream.get("index"),
                    "codec_name": stream.get("codec_name"),
                    "codec_long_name": stream.get("codec_long_name"),
                    "language": stream.get("tags", {}).get("language", "und"),
                    "title": stream.get("tags", {}).get("title", f"Stream {stream.get('index')}")
                }
                
                # Stream t√≠pusonk√©nti feldolgoz√°s
                if codec_type == "video":
                    stream_info.update({
                        "width": stream.get("width"),
                        "height": stream.get("height"),
                        "fps": eval(stream.get("r_frame_rate", "0/1")) if stream.get("r_frame_rate") else 0,
                        "bit_rate": stream.get("bit_rate")
                    })
                    result.video_streams.append(stream_info)
                    
                elif codec_type == "audio":
                    stream_info.update({
                        "channels": stream.get("channels", 0),
                        "sample_rate": stream.get("sample_rate"),
                        "bit_rate": stream.get("bit_rate")
                    })
                    result.audio_streams.append(stream_info)
                    
                elif codec_type == "subtitle":
                    result.subtitle_streams.append(stream_info)
            
            # Fejezetek feldolgoz√°sa
            result.chapters = media_info.get("chapters", [])
            
            return result
                
        except Exception as e:
            self.logger.error(f"Error detecting media streams: {e}")
            return MediaStreamInfo()
    
    async def extract_subtitle_to_vtt(self, file_path, stream_index, output_path):
        """Felirat kinyer√©se √©s konvert√°l√°sa WebVTT form√°tumba"""
        try:
            cmd = [
                "ffmpeg",
                "-i", str(file_path),
                "-map", f"0:s:{stream_index}",
                "-c:s", "webvtt",
                str(output_path)
            ]
            
            process = await asyncio.create_subprocess_exec(
                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            
            await process.communicate()
            
            return process.returncode == 0
        except Exception as e:
            self.logger.error(f"Error converting subtitle: {e}")
            return False
    
    async def add_subtitles_to_master_playlist(self, master_playlist_path, subtitle_streams):
        """Feliratok hozz√°ad√°sa a master playlisthez"""
        try:
            # Eredeti playlist beolvas√°sa
            with open(master_playlist_path, "r") as f:
                content = f.read()
            
            # Felirat bejegyz√©sek gener√°l√°sa
            subtitle_entries = []
            for stream in subtitle_streams:
                subtitle_entries.append(f'#EXT-X-MEDIA:TYPE=SUBTITLES,GROUP-ID="subs",NAME="{stream.get("title", "Unknown")}",LANGUAGE="{stream.get("language", "und")}",URI="subtitle_{stream["index"]}/subtitles.vtt"')
            
            # Bejegyz√©sek hozz√°ad√°sa a playlist v√©g√©hez
            content += "\n" + "\n".join(subtitle_entries)
            
            # M√≥dos√≠tott playlist vissza√≠r√°sa
            with open(master_playlist_path, "w") as f:
                f.write(content)
                
            return True
        except Exception as e:
            self.logger.error(f"Error modifying master playlist: {e}")
            return False
    
    async def create_direct_copy_hls(self, video_id: str, file_path: str, video_info: MediaStreamInfo) -> str:
        """Ultra gyors HLS l√©trehoz√°s Stream Copy m√≥dszerrel kompatibilis form√°tumokhoz"""
        try:
            start_time = time.time()
            self.logger.info(f"üöÑ STREAM COPY M√ìD IND√çT√ÅSA: {video_id}")
            
            # HLS k√∂nyvt√°r l√©trehoz√°sa
            video_hls_dir = self.HLS_DIR / video_id
            video_hls_dir.mkdir(exist_ok=True)
            
            # Alap√©rtelmezett k√©pm√©ret
            width = 1920
            height = 1080
            
            # Ha van vide√≥ stream, kivessz√ºk a felbont√°st
            if video_info.video_streams:
                first_video = video_info.video_streams[0]
                width = first_video.get("width", 1920)
                height = first_video.get("height", 1080)
            
            # K√∂zvetlen stream copy parancs
            cmd = [
                "ffmpeg",
                "-hide_banner",
                "-loglevel", "warning",
                "-i", str(file_path),
                "-c:v", "copy",       # Vide√≥ stream m√°sol√°sa
                "-c:a", "copy",       # Audio stream m√°sol√°sa
                "-hls_time", "4",
                "-hls_list_size", "0",
                "-hls_playlist_type", "vod",
                "-hls_segment_type", "mpegts",
                "-hls_flags", "independent_segments+split_by_time",
                "-hls_segment_filename", f"{video_hls_dir}/segment_%03d.ts",
                "-f", "hls",
                f"{video_hls_dir}/playlist.m3u8",
                "-y"
            ]
            
            self.logger.info(f"STREAM COPY PARANCS: {' '.join(map(str, cmd))}")
            
            process = await asyncio.create_subprocess_exec(
                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            # Log only on error
            if process.returncode != 0:
                self.logger.error(f"Stream copy hiba: {stderr.decode()}")
                return None
            
            # Master playlist l√©trehoz√°sa
            master_playlist_path = video_hls_dir / "master.m3u8"
            with open(master_playlist_path, "w") as f:
                f.write(f"""#EXTM3U
#EXT-X-VERSION:3
#EXT-X-STREAM-INF:BANDWIDTH=3000000,RESOLUTION={width}x{height}
playlist.m3u8
""")
            
            # Feliratok hozz√°ad√°sa a master playlisthez
            if video_info.subtitle_streams:
                # Feliratok mapp√°inak l√©trehoz√°sa √©s konvert√°l√°s
                for stream in video_info.subtitle_streams:
                    subtitle_dir = video_hls_dir / f"subtitle_{stream['index']}"
                    subtitle_dir.mkdir(exist_ok=True)
                    
                    # Felirat konvert√°l√°sa WebVTT form√°tumba
                    await self.extract_subtitle_to_vtt(file_path, stream['index'], subtitle_dir / "subtitles.vtt")
                
                await self.add_subtitles_to_master_playlist(master_playlist_path, video_info.subtitle_streams)
            
            # Sikeres feldolgoz√°s id≈ëm√©r√©se
            end_time = time.time()
            processing_time = end_time - start_time
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)  # MB-ban
            speed_mbps = file_size_mb / processing_time if processing_time > 0 else 0
            
            self.logger.info(f"üî• STREAM COPY BEFEJEZVE: {video_id}")
            self.logger.info(f"‚è±Ô∏è STREAM COPY ID≈ê: {processing_time:.2f} m√°sodperc")
            self.logger.info(f"üöÄ STREAM COPY SEBESS√âG: {speed_mbps:.2f} MB/s")
            
            return f"/hls/{video_id}/master.m3u8"
            
        except Exception as e:
            self.logger.error(f"Stream copy hiba: {e}")
            import traceback
            self.logger.error(traceback.format_exc())
            return None
    
    async def create_turbo_hls(self, video_id: str, file_path: str, video_info: MediaStreamInfo) -> str:
        """TURBO √úZEMM√ìD: Gyors√≠tott HLS k√©sz√≠t√©s GPU-val (vagy optimaliz√°lt CPU parancsokkal)"""
        try:
            start_time = time.time()
            self.logger.info(f"üî• TURBO M√ìD IND√çT√ÅSA: {video_id}")
            
            # HLS k√∂nyvt√°r l√©trehoz√°sa
            video_hls_dir = self.HLS_DIR / video_id
            video_hls_dir.mkdir(exist_ok=True)
            
            # Alap√©rtelmezett k√©pm√©ret
            width = 1920
            height = 1080
            
            # Ha van vide√≥ stream, kivessz√ºk a felbont√°st
            if video_info.video_streams:
                first_video = video_info.video_streams[0]
                width = first_video.get("width", 1920)
                height = first_video.get("height", 1080)
            
            # Optimaliz√°lt ffmpeg parancs √∂ssze√°ll√≠t√°sa GPU gyors√≠t√°ssal
            cmd_parts = ["ffmpeg", "-hide_banner", "-loglevel", "warning"]
            
            # GPU gyors√≠t√°s hozz√°ad√°sa, ha van
            if self.leopard_settings["hwaccel"]:
                cmd_parts.extend(self.leopard_settings["hwaccel"].split())
            
            # Input f√°jl
            cmd_parts.extend(["-i", str(file_path)])
            
            # Mappelj√ºk az els≈ë vide√≥- √©s az √∂sszes audiostreamt
            cmd_parts.extend(["-map", "0:v:0"])  # Els≈ë vide√≥ stream
            
            for i in range(len(video_info.audio_streams)):
                cmd_parts.extend(["-map", f"0:a:{i}"])  # Audio streamek
            
            # Encoder be√°ll√≠t√°sok hozz√°ad√°sa
            cmd_parts.extend(self.leopard_settings["encoder"].split())
            
            # Audio be√°ll√≠t√°sok
            cmd_parts.extend(["-c:a", "aac", "-b:a", "192k"])
            
            # Seeking jav√≠t√°s√°hoz
            cmd_parts.extend([
                "-force_key_frames", "expr:gte(t,n_forced*2)",  # 2 m√°sodpercenk√©nt kulcsk√©pkocka
                "-g", "48",                # GOP m√©ret
                "-keyint_min", "48",       # Minim√°lis kulcsk√©p t√°vols√°g
            ])
            
            # HLS be√°ll√≠t√°sok
            cmd_parts.extend([
                "-hls_time", "4",
                "-hls_list_size", "0",
                "-hls_playlist_type", "vod",
                "-hls_segment_type", "mpegts",
                "-hls_flags", "independent_segments+split_by_time",
                "-hls_segment_filename", f"{video_hls_dir}/segment_%03d.ts",
                "-f", "hls",
                f"{video_hls_dir}/playlist.m3u8",
                "-y"
            ])
            
            self.logger.info(f"TURBO M√ìD PARANCS: {' '.join(map(str, cmd_parts))}")
            
            process = await asyncio.create_subprocess_exec(
                *cmd_parts, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            # Log only on error
            if process.returncode != 0:
                self.logger.error(f"TURBO m√≥d hiba: {stderr.decode()}")
                return None
            
            # Master playlist l√©trehoz√°sa
            master_playlist_path = video_hls_dir / "master.m3u8"
            with open(master_playlist_path, "w") as f:
                f.write(f"""#EXTM3U
#EXT-X-VERSION:3
#EXT-X-STREAM-INF:BANDWIDTH=3000000,RESOLUTION={width}x{height}
playlist.m3u8
""")
            
            # Feliratok hozz√°ad√°sa a master playlisthez
            if video_info.subtitle_streams:
                # Feliratok mapp√°inak l√©trehoz√°sa √©s konvert√°l√°s
                for stream in video_info.subtitle_streams:
                    subtitle_dir = video_hls_dir / f"subtitle_{stream['index']}"
                    subtitle_dir.mkdir(exist_ok=True)
                    
                    # Felirat konvert√°l√°sa WebVTT form√°tumba
                    await self.extract_subtitle_to_vtt(file_path, stream['index'], subtitle_dir / "subtitles.vtt")
                
                await self.add_subtitles_to_master_playlist(master_playlist_path, video_info.subtitle_streams)
            
            # Sikeres feldolgoz√°s id≈ëm√©r√©se
            end_time = time.time()
            processing_time = end_time - start_time
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)  # MB-ban
            speed_mbps = file_size_mb / processing_time if processing_time > 0 else 0
            
            self.logger.info(f"üî• TURBO M√ìD BEFEJEZVE: {video_id}")
            self.logger.info(f"‚è±Ô∏è TURBO M√ìD ID≈ê: {processing_time:.2f} m√°sodperc")
            self.logger.info(f"üöÄ TURBO M√ìD SEBESS√âG: {speed_mbps:.2f} MB/s")
            
            return f"/hls/{video_id}/master.m3u8"
            
        except Exception as e:
            self.logger.error(f"TURBO m√≥d hiba: {e}")
            import traceback
            self.logger.error(traceback.format_exc())
            return None
    
    async def create_preview_hls(self, video_id: str, file_path: str, original_format: str) -> Optional[str]:
        """3 perces el≈ën√©zeti HLS l√©trehoz√°sa azonnali lej√°tsz√°shoz"""
        try:
            self.logger.info(f"‚ö° EL≈êN√âZETI HLS L√âTREHOZ√ÅSA: {video_id}")
            
            # HLS k√∂nyvt√°r l√©trehoz√°sa
            preview_dir = self.HLS_DIR / f"{video_id}_preview"
            preview_dir.mkdir(exist_ok=True)
            
            # A leggyorsabb ultrafast preset haszn√°lata
            cmd = [
                "ffmpeg",
                "-hide_banner",
                "-loglevel", "warning",
                "-i", str(file_path),
                "-t", "180",  # 3 perc
                "-map", "0:v:0",   # Els≈ë vide√≥ stream
                "-map", "0:a:0?",  # Els≈ë audio stream (opcion√°lis)
                "-c:v", "libx264", # CPU-alap√∫ kodek a sebess√©g√©rt
                "-preset", "ultrafast", # Leggyorsabb preset
                "-crf", "26",      # Kicsit alacsonyabb min≈ës√©g a sebess√©g√©rt
                "-c:a", "aac",
                "-b:a", "96k",     # Alacsonyabb audio bitr√°ta
                "-hls_time", "4",
                "-hls_list_size", "0",
                "-hls_playlist_type", "vod",
                "-hls_segment_filename", f"{preview_dir}/segment_%03d.ts",
                "-f", "hls",
                f"{preview_dir}/playlist.m3u8",
                "-y"
            ]
            
            self.logger.info(f"EL≈êN√âZET PARANCS: {' '.join(map(str, cmd))}")
            
            process = await asyncio.create_subprocess_exec(
                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode != 0:
                self.logger.error(f"El≈ën√©zet FFmpeg hiba: {stderr.decode()}")
                return None
            
            playlist_path = preview_dir / "playlist.m3u8"
            if process.returncode == 0 and playlist_path.exists():
                # Master playlist l√©trehoz√°sa
                master_playlist_path = preview_dir / "master.m3u8"
                with open(master_playlist_path, "w") as f:
                    f.write("""#EXTM3U
#EXT-X-VERSION:3
#EXT-X-STREAM-INF:BANDWIDTH=1000000,RESOLUTION=854x480
playlist.m3u8
""")
                
                self.logger.info(f"El≈ën√©zeti HLS sikeresen l√©trehozva: {video_id}")
                return f"/hls/{video_id}_preview/master.m3u8"
            else:
                return None
                
        except Exception as e:
            self.logger.error(f"El≈ën√©zet l√©trehoz√°si hiba: {e}")
            return None

    async def convert_video(self, video_id: str, file_path: str, original_format: str):
        """Ultra-optimaliz√°lt vide√≥ feldolgoz√°s - LEOPARD FINAL EDITION"""
        try:
            self.logger.info(f"‚ö°‚ö°‚ö° LEOPARD FINAL FELDOLGOZ√ÅS INDUL: {video_id}, form√°tum: {original_format} ‚ö°‚ö°‚ö°")
            
            # √Åll√≠tsuk be az √∫tvonalakat
            thumbnail_path = self.CONVERTED_DIR / f"{video_id}_thumb.jpg"
            
            # Kezdeti st√°tusz: feldolgoz√°s alatt
            self.videos_db[video_id]["status"] = "processing"
            
            # Azonnali p√°rhuzamos ind√≠t√°s:
            # 1. Thumbnail gener√°l√°s k√ºl√∂n h√°tt√©rben
            thumbnail_future = asyncio.create_task(asyncio.to_thread(
                self.generate_thumbnail, file_path, thumbnail_path
            ))
            
            # 2. Media streams inform√°ci√≥k lek√©r√©se a feldolgoz√°shoz
            media_info = await self.get_media_streams(file_path)
            
            # 3. El≈ën√©zeti HLS ind√≠t√°sa azonnal
            preview_future = asyncio.create_task(
                self.create_preview_hls(video_id, file_path, original_format)
            )
            
            # 4. Teljes verzi√≥ feldolgoz√°sa k√∂zvetlen√ºl stream copy vagy egyszer≈± GPU paranccsal
            if self.is_web_compatible(original_format):
                # MP4/WebM eset√©n gyors stream copy - azonnali m√°solt verzi√≥
                main_future = asyncio.create_task(
                    self.create_direct_copy_hls(video_id, file_path, media_info)
                )
            else:
                # MKV/AVI eset√©n turbo feldolgoz√°s - egyszer≈± GPU k√≥dol√°s
                main_future = asyncio.create_task(
                    self.create_turbo_hls(video_id, file_path, media_info)
                )
            
            # El≈ën√©zeti verzi√≥ k√©sz, friss√≠ts√ºk azonnal a st√°tuszt
            preview_hls_url = await preview_future
            if preview_hls_url:
                self.videos_db[video_id]["status"] = "preview_ready"
                self.videos_db[video_id]["preview_hls_url"] = preview_hls_url
                self.videos_db[video_id]["thumbnail"] = f"/api/thumbnails/{video_id}" if os.path.exists(thumbnail_path) else None
                self.videos_db[video_id]["duration"] = self.get_video_duration(file_path)
                self.logger.info(f"‚úÖ EL≈êN√âZET K√âSZ: {video_id}")
            
            # Thumbnail k√©sz, ha m√©g nincs be√°ll√≠tva
            await thumbnail_future
            if os.path.exists(thumbnail_path) and not self.videos_db[video_id].get("thumbnail"):
                self.videos_db[video_id]["thumbnail"] = f"/api/thumbnails/{video_id}"
            
            # Teljes vide√≥ feldolgoz√°s eredm√©nye
            hls_url = await main_future
            
            # Stream inform√°ci√≥k elt√°rol√°sa
            self.videos_db[video_id]["stream_info"] = {
                "audio_streams": len(media_info.audio_streams),
                "subtitle_streams": len(media_info.subtitle_streams),
                "video_streams": len(media_info.video_streams)
            }
            
            # Adatb√°zis friss√≠t√©se az eredm√©nyekkel
            if hls_url:
                self.videos_db[video_id]["status"] = "ready"
                self.videos_db[video_id]["web_compatible"] = True
                self.videos_db[video_id]["hls_url"] = hls_url
                self.videos_db[video_id]["duration"] = self.get_video_duration(file_path)
                self.logger.info(f"‚úÖ TELJES VIDE√ì FELDOLGOZ√ÅS SIKERES: {video_id}, HLS URL: {hls_url}")
            else:
                # M√©g HLS hiba eset√©n is ready √°llapotba √°ll√≠tjuk, ha van el≈ën√©zet
                if self.videos_db[video_id]["status"] != "ready":
                    self.videos_db[video_id]["status"] = "ready" if preview_hls_url else "error"
                self.logger.warning(f"‚ö†Ô∏è HLS HIBA: {video_id}, de el≈ën√©zet vagy direkt streamel√©s el√©rhet≈ë")
                    
        except Exception as e:
            self.videos_db[video_id]["status"] = "error"
            self.logger.error(f"Feldolgoz√°si hiba: {e}")
            import traceback
            self.logger.error(traceback.format_exc())
